---
import { SignedIn, SignedOut } from "@clerk/astro/components";
import { Icon } from "astro-icon/components";
import Starfield from "~/components/starfield.astro";
import ThemeSwitcher from "~/components/theme-switcher.astro";
import Header from "~/components/header.astro";
import {SignInButton, UserButton } from "@clerk/astro/components";
import type { NavItem } from "~/types";

// QuickQuotes.astro
const auth = Astro.locals.auth();
const userId = auth.userId;
const navItems: Array<NavItem> = [
  { title: "Why use Arknet?", url: "/#features" },
  { title: "Our Services", url: "/#compatibility" },
];

console.log("Current user ID:", userId);

// Your existing QuickQuotes logic here
// ...

---
<!-- Add viewport meta tag in your head section -->
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no">
  <title>Parcel Delivery Quick Quote</title>
  <style is:global>
    /* Add these styles to adjust the header */
    #page-header {
      @apply fixed top-0 bottom-auto bg-gray-800 bg-opacity-0;
    }
    #page-header a, #page-header button {
      @apply text-sm;
    }
    /* Adjust user profile picture size */
    #page-header .user-button-wrapper .cl-userButtonAvatarBox {
      @apply h-7 w-7 !important;  /* Adjust this value as needed */
    }
        /* Custom styles for QuickQuote header */
    #page-header .logo {
      @apply size-7;  /* Adjust this value to change the logo size */
    }
    #page-header .nologo {
      @apply h-3;  /* Adjust this value to change the nologo size */
    }
    .sign-in-button {
      font-size: 1.05rem !important;
    }
    
    /* Ensure Clerk components are visible */
    /* clerk-signed-in {
      display: contents !important;
    } */
  </style>
</head>
<body class="bg-white">
  
  <header
        id="page-header"
        class="fixed top-0 z-50 flex w-full items-center justify-between border-b border-transparent px-8 py-4 bg-default"
    >
        <a class="flex items-center gap-3 hover:!text-default" href="/">
          <h1 class="sr-only">Arknet</h1>
          <Icon name="arknetAlogo" class="text-white  size-7" />
          <Icon name="arknetnolog" class="hidden h-3 sm:block text-white" />
      </a>
        
        <div class="flex items-center gap-6">
          <nav class="hidden sm:block">
            <ul class="flex items-center gap-6">
              {
                navItems.map(({ title, url }) => ( 
                  <li>
                    <a class="text-lg font-normal py-2 px-3 text-white" href={url}>
                      {title}
                    </a>
                  </li>
                ))
              }
                <SignedIn>
                    <li>
                        <a 
                            class="text-lg font-normal py-2 px-3 text-white" 
                            href="/orders/"
                        >
                            Your Orders
                        </a>
                    </li>
                </SignedIn>
            </ul>
        </nav>
              <SignedOut>
                <SignInButton mode="redirect" class="sign-in-button text-white" style="font-size: 1.5rem;"/>
              </SignedOut>
              <SignedIn>
                <div class="user-button-wrapper">
                  <UserButton                     
                  />
                </div>
              </SignedIn>
        </div>
        
    </header>
<section class="relative min-h-screen bg-black text-white flex items-center justify-center">
  <Starfield />
  
  <div class="container w-full mx-auto px-2 py-4 md:py-12 flex items-center justify-center">
    <div class="w-full max-w-3xl mx-auto bg-white bg-opacity-10 backdrop-blur-md rounded-lg shadow-lg p-3 md:p-6">
      <div class="mb-4 md:mb-6 text-center">
        <h2 class="text-2xl md:text-3xl font-bold gradient-text">PARCEL DELIVERY QUICK QUOTE</h2>
      </div>

      <form class="space-y-4 md:space-y-6" id="parcelForm">
        <!-- Enforce single column on small screens -->
        <div class="flex flex-col md:grid md:grid-cols-2 gap-4 md:gap-6">
          <!-- Collection Address Section -->
          <div class="space-y-3 md:space-y-4 w-full">
            <div class="relative">
              <label class="block text-sm font-medium mb-1" for="pickupPostcode">Collection Postcode:</label>
              <input
                type="text"
                id="pickupPostcode"
                placeholder="Enter collection postcode"
                class="w-full px-3 py-3 md:py-2 text-base md:text-sm bg-gray-800 border border-gray-600 rounded-md focus:outline-none focus:ring-2 focus:ring-primary"
                autocomplete="off"
                required
              />
              <ul id="pickupSuggestions" class="absolute z-10 w-full bg-gray-800 border border-gray-600 rounded-md shadow-lg hidden"></ul>
            </div>
            <div class="relative">
              <label class="block text-sm font-medium mb-1" for="pickup">Collection address:</label>
              <input
                type="text"
                id="pickup"
                placeholder="Enter collection address"
                class="w-full px-3 py-3 md:py-2 text-base md:text-sm bg-gray-800 border border-gray-600 rounded-md focus:outline-none focus:ring-2 focus:ring-primary"
                autocomplete="off"
              />
            </div>
          </div>

          <!-- Delivery Address Section -->
          <div class="space-y-3 md:space-y-4 w-full">
            <div class="relative">
              <label class="block text-sm font-medium mb-1" for="destinationPostcode">Delivery Postcode:</label>
              <input
                type="text"
                id="destinationPostcode"
                placeholder="Enter delivery postcode"
                class="w-full px-3 py-3 md:py-2 text-base md:text-sm bg-gray-800 border border-gray-600 rounded-md focus:outline-none focus:ring-2 focus:ring-primary"
                autocomplete="off"
                required
              />
              <ul id="destinationSuggestions" class="absolute z-10 w-full bg-gray-800 border border-gray-600 rounded-md shadow-lg hidden"></ul>
            </div>
            <div class="relative">
              <label class="block text-sm font-medium mb-1" for="destination">Delivery address:</label>
              <input
                type="text"
                id="destination"
                placeholder="Enter delivery address"
                class="w-full px-3 py-3 md:py-2 text-base md:text-sm bg-gray-800 border border-gray-600 rounded-md focus:outline-none focus:ring-2 focus:ring-primary"
                autocomplete="off"
              />
            </div>
          </div>
        </div>
        <!-- <div class="w-full">
          <label class="block text-sm font-medium mb-1" for="phone_number">Phone Number:</label>
          <input
            type="tel"
            id="phone_number"
            placeholder="Enter phone number"
            class="w-full px-3 py-3 md:py-2 text-base md:text-sm bg-gray-800 border border-gray-600 rounded-md focus:outline-none focus:ring-2 focus:ring-primary"
            required
          />
        </div> -->
        <!-- Single column layout for additional fields -->
        <div class="flex flex-col md:grid md:grid-cols-3 gap-4 md:gap-6">
          <div class="w-full">
            <label class="block text-sm font-medium mb-1" for="weight">Weight (kg):</label>
            <input
              type="number"
              id="weight"
              placeholder="Enter weight"
              step="0.1"
              min="0"
              class="w-full px-3 py-3 md:py-2 text-base md:text-sm bg-gray-800 border border-gray-600 rounded-md focus:outline-none focus:ring-2 focus:ring-primary"
              required
            />
          </div>
          
          <div class="w-full">
            <label class="block text-sm font-medium mb-1" for="serviceLevel">Service Level:</label>
            <select 
              id="serviceLevel" 
              class="w-full px-3 py-3 md:py-2 text-base md:text-sm bg-gray-800 border border-gray-600 rounded-md focus:outline-none focus:ring-2 focus:ring-primary"
              required
            >
              <option value="standard">Standard</option>
              <option value="express">Express</option>
              <option value="nextDay">Next Day</option>
            </select>
          </div>
          <div class="w-full">
            <label class="block text-sm font-medium mb-1" for="shippingType">Shipping Type:</label>
            <select 
              id="shippingType" 
              class="w-full px-3 py-3 md:py-2 text-base md:text-sm bg-gray-800 border border-gray-600 rounded-md focus:outline-none focus:ring-2 focus:ring-primary"
              required
            >
              <option value="parcel">Parcel</option>
              <option value="document">Document</option>
              <option value="pallet">Pallet</option>
            </select>
          </div>
        </div>

        <div id="distance-info" class="mt-4 p-3 bg-gray-800 bg-opacity-10 rounded-md hidden">
          <p class="text-sm font-medium">Estimated driving distance: <span id="distance-value"></span></p>
        </div>
        
        <div id="price-info" class="mt-4 p-2 bg-gray-800 bg-opacity-0 rounded-md hidden">
          <p class="text-xl md:text-lg font-bold">Price: &pound;<span id="price-value">N/A</span></p>
        </div>
        
        <div class="flex justify-center md:justify-end items-center pt-4">
          <button 
            type="submit" 
            id="quoteButton"
            disabled 
            class="w-full md:w-auto px-6 py-4 md:py-3 bg-gradient-to-r from-purple-600 to-pink-500 text-white rounded-md font-bold text-lg hover:opacity-90 transition-all duration-300 disabled:opacity-50 disabled:cursor-not-allowed"
          >
            Get Quote & Book
          </button>
        </div>
      </form>
    </div>
  </div>
  <!-- <div id="user-id-container" data-user-id="" class="hidden"></div> -->
</section>

<style>
  .gradient-text {
    @apply bg-clip-text text-transparent bg-gradient-to-r from-purple-400 to-pink-600;
  }
  
  #pickupSuggestions li,
  #destinationSuggestions li {
    @apply px-3 py-2 hover:bg-gray-700 cursor-pointer text-white text-base md:text-sm;
  }

  /* Force full width on mobile */
  @media (max-width: 768px) {
    .container {
      max-width: 100% !important;
      padding: 0.5rem !important;
    }
    
    input, select, button {
      width: 100% !important;
    }
    :global(.quickquote-header) {
        display: none !important;
    }
  }
</style>
<script src="https://js.stripe.com/v3/"></script>
<script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyDQAS10PACxUcHOp-46b10e6Etfrguxato&libraries=places"></script>
<script>
  const apiBaseUrl = import.meta.env.MODE === 'production' 
  ? 'https://worker-backend.hamzaaslam2121.workers.dev'
  : '';
  import { Clerk } from '@clerk/clerk-js';
  
  document.addEventListener('DOMContentLoaded', async () => {
    // Initialize Clerk
    const clerk = new Clerk('pk_test_ZHJpdmluZy1tYWNhdy00NC5jbGVyay5hY2NvdW50cy5kZXYk');
    await clerk.load();

    let userId = 'anonymous';
    let userEmail = '';
    function updateUserInfo() {
      if (clerk.user) {
        userId = clerk.user.id;
        userEmail = clerk.user.primaryEmailAddress?.emailAddress || '';
        console.log("Current user ID:", userId);
        console.log("Current user email:", userEmail);
        // quoteButton.textContent = "Get Quote & Book";
      } else {
        userId = 'anonymous';
        userEmail = '';
        console.log("No user is signed in.");
        // quoteButton.textContent = "Sign In to Get Quote";
      }
    }
    // Initial update
    updateUserInfo();

    // Listen for sign-in state changes
    clerk.addListener(updateUserInfo);
    // @ts-ignore
    const stripe = Stripe('pk_test_51OddvpG2vb5Xhm5fmHYLmRtMlZE1syE8oI4ohzhNcU7hdxRYY8hcV98pQNuVVTs4iaJjoxXhKwcXzCUvgdkrwqbi00ALKz3pW8');
    const form = document.getElementById('parcelForm') as HTMLFormElement;
    const pickupInput = document.getElementById('pickup') as HTMLInputElement;
    const destinationInput = document.getElementById('destination') as HTMLInputElement;
    const pickupPostcodeInput = document.getElementById('pickupPostcode') as HTMLInputElement;
    const destinationPostcodeInput = document.getElementById('destinationPostcode') as HTMLInputElement;
    const pickupSuggestions = document.getElementById('pickupSuggestions') as HTMLUListElement;
    const destinationSuggestions = document.getElementById('destinationSuggestions') as HTMLUListElement;
    const distanceInfo = document.getElementById('distance-info') as HTMLDivElement;
    const distanceValue = document.getElementById('distance-value') as HTMLSpanElement;
    const priceInfo = document.getElementById('price-info') as HTMLDivElement;
    const priceElement = document.getElementById('price-value') as HTMLSpanElement;
    const weightInput = document.getElementById('weight') as HTMLInputElement;
    const serviceLevelSelect = document.getElementById('serviceLevel') as HTMLSelectElement;
    const shippingTypeSelect = document.getElementById('shippingType') as HTMLSelectElement;
    const quoteButton = document.getElementById('quoteButton') as HTMLButtonElement;
    //const phone_numberInput = document.getElementById('phone_number') as HTMLInputElement;

    let calculatedDistance = 0;

    // Modified Autocomplete initialization to restrict to UK addresses
    const autocompleteOptions = {
      types: ['address'],
      componentRestrictions: { country: 'gb' } // 'gb' is the country code for the United Kingdom
    };

    // @ts-ignore
    const pickupAutocomplete = new google.maps.places.Autocomplete(pickupInput, autocompleteOptions);
    // @ts-ignore
    const destinationAutocomplete = new google.maps.places.Autocomplete(destinationInput, autocompleteOptions);

    // Postcode suggestions function remains the same
    // Postcode suggestions function
    async function fetchPostcodeSuggestions(query: string, suggestionsList: HTMLUListElement) {
      if (query.length < 2) {
        suggestionsList.innerHTML = '';
        suggestionsList.classList.add('hidden');
        return;
      }

      try {
        const response = await fetch(`${apiBaseUrl}/api/postcode-suggestions?q=${encodeURIComponent(query)}`);
        if (!response.ok) throw new Error('Failed to fetch suggestions');
        
        const suggestions: string[] = await response.json();
        
        suggestionsList.innerHTML = '';
        suggestions.forEach((postcode: string) => {
          const li = document.createElement('li');
          li.textContent = postcode;
          li.className = 'px-3 py-2 hover:bg-gray-700 cursor-pointer';
          li.onclick = () => {
            const input = suggestionsList.id === 'pickupSuggestions' ? pickupPostcodeInput : destinationPostcodeInput;
            input.value = postcode;
            suggestionsList.classList.add('hidden');
            calculateDistance();
          };
          suggestionsList.appendChild(li);
        });
        
        suggestionsList.classList.remove('hidden');
      } catch (error) {
        console.error('Error fetching postcode suggestions:', error);
      }
    }

    // Modified calculateDistance function to use postcodes
    async function calculateDistance() {
      const pickup = pickupPostcodeInput.value.trim();
      const destination = destinationPostcodeInput.value.trim();
      
      if (pickup && destination) {
        try {
          const response = await fetch(`${apiBaseUrl}/api/calculate-distance?origin=${encodeURIComponent(pickup)}&destination=${encodeURIComponent(destination)}`);
          if (!response.ok) throw new Error(`Failed to calculate distance: ${response.status} ${response.statusText}`);
          
          const data = await response.json();
          
          if (data.distance) {
            calculatedDistance = parseFloat(data.distance);
            distanceValue.textContent = `${data.distance} ${data.unit}`;
            updatePrice();
          } else {
            throw new Error('Invalid distance data');
          }
        } catch (error) {
          console.error('Error calculating distance:', error);
          distanceInfo.classList.add('hidden');
          priceInfo.classList.add('hidden');
          priceElement.textContent = 'N/A';
        }
      } else {
        distanceInfo.classList.add('hidden');
        priceInfo.classList.add('hidden');
        priceElement.textContent = 'N/A';
      }
    }

    function calculatePrice() {
      const distance = calculatedDistance;
      const weight = parseFloat(weightInput.value) || 0;
      const serviceLevel = serviceLevelSelect.value;
      const shippingType = shippingTypeSelect.value;

      // Updated base price for GBP (assuming £0.10 per mile + £2 base charge)
      let price = (distance * 0.1) + 2;
      price += weight * 0.2;

      if (serviceLevel === 'express') {
        price *= 1.5;
      } else if (serviceLevel === 'nextDay') {
        price *= 2;
      }

      if (shippingType === 'document') {
        price *= 0.8;
      } else if (shippingType === 'pallet') {
        price *= 2.5;
      }

      return price.toFixed(2);
    }

    function updatePrice() {
      if (pickupPostcodeInput.value && destinationPostcodeInput.value && weightInput.value && calculatedDistance > 0) {
        const price = calculatePrice();
        priceElement.textContent = price;
        priceInfo.classList.remove('hidden');
        
        // Enable/disable button based on price
        const numericPrice = parseFloat(price);
        quoteButton.disabled = isNaN(numericPrice) || numericPrice <= 0;
        
        // Update button styles based on state
        if (quoteButton.disabled) {
          quoteButton.classList.add('opacity-50', 'cursor-not-allowed');
        } else {
          quoteButton.classList.remove('opacity-50', 'cursor-not-allowed');
        }
      } else {
        priceElement.textContent = 'N/A';
        priceInfo.classList.add('hidden');
        quoteButton.disabled = true;
        quoteButton.classList.add('opacity-50', 'cursor-not-allowed');
      }
    }
    function pingServer() {
      fetch(`${apiBaseUrl}/api/ping`)
        .then(response => response.json())
        .catch(error => console.error('Ping failed:', error));
    }
    // Ping every 5 minutes
    setInterval(pingServer, 60 * 1000);
    // Initial ping when the page loads
    pingServer();

    let debounceTimer: ReturnType<typeof setTimeout>;
    function debounce(func: Function, delay: number) {
      return function(this: any) {
        const context = this;
        const args = arguments;
        clearTimeout(debounceTimer);
        debounceTimer = setTimeout(() => func.apply(context, args), delay);
      }
    }

    // Modified event listeners to use postcode inputs for distance calculation
    pickupPostcodeInput.addEventListener('input', debounce(() => {
      fetchPostcodeSuggestions(pickupPostcodeInput.value, pickupSuggestions);
      calculateDistance();
    }, 300));

    destinationPostcodeInput.addEventListener('input', debounce(() => {
      fetchPostcodeSuggestions(destinationPostcodeInput.value, destinationSuggestions);
      calculateDistance();
    }, 300));

    // Remove distance calculation from address input listeners
    weightInput.addEventListener('input', updatePrice);
    serviceLevelSelect.addEventListener('change', updatePrice);
    shippingTypeSelect.addEventListener('change', updatePrice);

    // Hide suggestions when clicking outside
    document.addEventListener('click', (e) => {
      if (!pickupPostcodeInput.contains(e.target as Node)) {
        pickupSuggestions.classList.add('hidden');
      }
      if (!destinationPostcodeInput.contains(e.target as Node)) {
        destinationSuggestions.classList.add('hidden');
      }
    });

    // Form submission handler remains the same
    form.addEventListener('submit', async (e) => {
      e.preventDefault();
      if (!clerk.user) {
        // If user is not signed in, open the sign-in modal
        clerk.openSignIn();
        return;
      }
    // Get current datetime in dd/mm/yyyy hh:mm:ss format
    const now = new Date();
    const datetime = now.toLocaleString('en-GB', {
      day: '2-digit',
      month: '2-digit',
      year: 'numeric',
      hour: '2-digit',
      minute: '2-digit',
      second: '2-digit',
      hour12: false
    }).replace(/\//g, '-');

    const formData = {
        user: userId,   
        pickup: pickupInput.value || pickupPostcodeInput.value,
        destination: destinationInput.value || destinationPostcodeInput.value,
        price: parseFloat(priceElement.textContent || '0'),
        distance: calculatedDistance,
        completed: 0,
        serviceLevel: serviceLevelSelect.value,
        shippingType: shippingTypeSelect.value,
        weight: parseFloat(weightInput.value) || 0,
        datetime: datetime,
        email: userEmail,
      };

      console.log('Submitting form data:', formData);

      try {
        const response = await fetch(`${apiBaseUrl}/api/create-checkout-session`, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify(formData),
        });

        if (!response.ok) {
          const errorData = await response.json();
          throw new Error(`HTTP error! status: ${response.status}, message: ${errorData.error}, details: ${errorData.details}`);
        }

        const { sessionId, url } = await response.json();

        if (url) {
          // If the server provides a URL, use it for redirection
          window.location.href = url;
        } else if (sessionId) {
          // Fall back to client-side redirection if only sessionId is provided
          const result = await stripe.redirectToCheckout({ sessionId });
          if (result.error) {
            throw new Error(result.error.message);
          }
        } else {
          throw new Error('Neither URL nor sessionId was provided by the server');
        }
      } catch (error) {
        console.error('Error:', error);
        alert('Error creating checkout session: ' + (error instanceof Error ? error.message : String(error)));
      }
    });
    
  if (clerk.user) {
        quoteButton.textContent = "Get Quote & Book";
      } else {
        quoteButton.textContent = "Sign In to Book Order";
      }
  });

</script>
</body>