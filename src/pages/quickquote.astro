---
// QuickQuotes.astro
const auth = Astro.locals.auth();
const userId = auth.userId;

console.log("Current user ID:", userId);

// Your existing QuickQuotes logic here
// ...

---

<div class="w-full max-w-3xl mx-auto bg-white rounded-lg shadow p-6">
  <div class="mb-6">
    <h2 class="text-2xl font-bold">PARCEL DELIVERY QUICK QUOTE</h2>
    <p class="text-sm text-gray-600">
      Simply enter your parcel details and destination to see the prices and services available.
    </p>
  </div>

  <form class="space-y-4" id="parcelForm">
    <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
      <div class="relative">
        <label class="block text-sm font-medium mb-1" for="pickup">Collection address:</label>
        <input
          type="text"
          id="pickup"
          placeholder="Enter collection address"
          class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-red-500"
          autocomplete="off"
          required
        />
      </div>
      <div class="relative">
        <label class="block text-sm font-medium mb-1" for="destination">Delivery address:</label>
        <input
          type="text"
          id="destination"
          placeholder="Enter delivery address"
          class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-red-500"
          autocomplete="off"
          required
        />
      </div>
    </div>

    <!-- <div class="flex justify-end">
      <button type="button" id="calculateDistance" class="px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700">
        Calculate Distance
      </button>
    </div> -->


  
      <div class="grid grid-cols-1 md:grid-cols-3 gap-4">
        
        <div>
          <label class="block text-sm font-medium mb-1" for="weight">Weight (kg):</label>
          <input
            type="number"
            id="weight"
            placeholder="Enter weight"
            step="0.1"
            min="0"
            class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-red-500"
            required
          />
        </div>
        <div>
          <label class="block text-sm font-medium mb-1" for="serviceLevel">Service Level:</label>
          <select 
            id="serviceLevel" 
            class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-red-500"
            required
          >
            <option value="standard">Standard</option>
            <option value="express">Express</option>
            <option value="nextDay">Next Day</option>
          </select>
        </div>
        <div>
          <label class="block text-sm font-medium mb-1" for="shippingType">Shipping Type:</label>
          <select 
            id="shippingType" 
            class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-red-500"
            required
          >
            <option value="parcel">Parcel</option>
            <option value="document">Document</option>
            <option value="pallet">Pallet</option>
          </select>
        </div>
      </div>
      <div id="distance-info" class="mt-4 p-3 bg-gray-100 rounded-md hidden">
        <p class="text-sm font-medium">Estimated driving distance: <span id="distance-value"></span></p>
      </div>
      <div id="price-info" class="mt-4 p-3 bg-gray-100 rounded-md hidden">
        <p>Estimated Price: $<span id="price-value">N/A</span></p>
      </div>
      <div class="flex justify-end items-center pt-4">
        <button type="submit" class="px-4 py-2 bg-red-600 text-white rounded hover:bg-red-700">
          Get Quote & Book
        </button>
      </div>
    </form>
</div>
  
<script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyDQAS10PACxUcHOp-46b10e6Etfrguxato&libraries=places"></script>
<script define:vars={{ userId }}>
    document.addEventListener('DOMContentLoaded', () => {
      const form = document.getElementById('parcelForm');
      const pickupInput = document.getElementById('pickup');
      const destinationInput = document.getElementById('destination');
      const distanceInfo = document.getElementById('distance-info');
      const distanceValue = document.getElementById('distance-value');
      const priceInfo = document.getElementById('price-info'); // Get the price info div
      const priceElement = document.getElementById('price-value');
      const weightInput = document.getElementById('weight');
      const serviceLevelSelect = document.getElementById('serviceLevel');
      const shippingTypeSelect = document.getElementById('shippingType');
      let calculatedDistance = 0;

      if (!form || !pickupInput || !destinationInput || !distanceInfo || !distanceValue || !weightInput || !serviceLevelSelect || !shippingTypeSelect) {
        console.error('One or more form elements not found');
        return;
      }

      // Initialize Google Maps Autocomplete
      const pickupAutocomplete = new google.maps.places.Autocomplete(pickupInput, { types: ['address'] });
      const destinationAutocomplete = new google.maps.places.Autocomplete(destinationInput, { types: ['address'] });

      function calculatePrice() {
        const distance = calculatedDistance;
        const weight = parseFloat(weightInput.value) || 0;
        const serviceLevel = serviceLevelSelect.value;
        const shippingType = shippingTypeSelect.value;

        // Base price calculation
        let price = (distance / 4) + 3;

        // Adjust price based on weight
        price += weight * 0.5;

        // Adjust price based on service level
        if (serviceLevel === 'express') {
          price *= 1.5;
        } else if (serviceLevel === 'nextDay') {
          price *= 2;
        }

        // Adjust price based on shipping type
        if (shippingType === 'document') {
          price *= 0.8;
        } else if (shippingType === 'pallet') {
          price *= 2.5;
        }

        return price.toFixed(2);
      }
      async function calculateDistance() {
        const pickup = pickupInput.value.trim();
        const destination = destinationInput.value.trim();
        
        if (pickup && destination) {
          try {
            const response = await fetch(`/api/calculate-distance?origin=${encodeURIComponent(pickup)}&destination=${encodeURIComponent(destination)}`);
            if (!response.ok) throw new Error(`Failed to calculate distance: ${response.status} ${response.statusText}`);
            
            const data = await response.json();
            
            if (data.distance) {
              calculatedDistance = parseFloat(data.distance);
              distanceValue.textContent = `${data.distance} ${data.unit}`;
              //distanceInfo.classList.remove('hidden');
              updatePrice();
            } else {
              throw new Error('Invalid distance data');
            }
          } catch (error) {
            console.error('Error calculating distance:', error);
            distanceInfo.classList.add('hidden');
            priceInfo.classList.add('hidden'); // Hide price on error
            priceElement.textContent = 'N/A';
          }
        } else {
          distanceInfo.classList.add('hidden');
          priceInfo.classList.add('hidden'); // Hide price when no input
          priceElement.textContent = 'N/A';
        }
      }
      function updatePrice() {
        if (pickupInput.value && destinationInput.value && weightInput.value && calculatedDistance > 0) {
          const price = calculatePrice();
          priceElement.textContent = price;
          priceInfo.classList.remove('hidden'); // Show the price div
        } else {
          priceElement.textContent = 'N/A';
          priceInfo.classList.add('hidden'); // Hide if no input or distance
        }
      }

      let debounceTimer;
      function debounce(func, delay) {
        return function() {
          const context = this;
          const args = arguments;
          clearTimeout(debounceTimer);
          debounceTimer = setTimeout(() => func.apply(context, args), delay);
        }
      }

      // Add event listeners to both input fields
  pickupInput.addEventListener('input', debounce(calculateDistance, 500));
  destinationInput.addEventListener('input', debounce(calculateDistance, 500));
  weightInput.addEventListener('input', updatePrice);
  serviceLevelSelect.addEventListener('change', updatePrice);
  shippingTypeSelect.addEventListener('change', updatePrice);


  form.addEventListener('submit', async (e) => {
    e.preventDefault();

    const formData = {
      user: userId || 'anonymous',
      pickup: pickupInput.value,
      destination: destinationInput.value,
      price: parseFloat(priceElement.textContent) || 0,
      distance: calculatedDistance,
      completed: 0,
      serviceLevel: serviceLevelSelect.value,
      shippingType: shippingTypeSelect.value,
      weight: parseFloat(weightInput.value) || 0
    };

    console.log('Submitting form data:', formData);

    try {
      const response = await fetch('/api/submit-quote', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(formData),
      });

      if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);

      const result = await response.json();

      if (result.success) {
        alert(`Quote submitted successfully! Order ID: ${result.orderId}`);
      } else {
        alert('Error submitting quote: ' + result.error);
      }
    } catch (error) {
      console.error('Error:', error);
      alert('Error submitting quote: ' + (error instanceof Error ? error.message : String(error)));
    }
  });
});
</script>