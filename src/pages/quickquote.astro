---
// QuickQuotes.astro
const auth = Astro.locals.auth();
const userId = auth.userId;

console.log("Current user ID:", userId);

// Your existing QuickQuotes logic here
// ...

---

<div class="w-full max-w-3xl mx-auto bg-white rounded-lg shadow p-6">
  <div class="mb-6">
    <h2 class="text-2xl font-bold">PARCEL DELIVERY QUICK QUOTE</h2>
    <p class="text-sm text-gray-600">
      Simply enter your parcel details and destination to see the prices and services available.
    </p>
  </div>

  <form class="space-y-4" id="parcelForm">
    <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
      <!-- Collection Address Section -->
      <div class="space-y-2">
        <div class="relative">
          <label class="block text-sm font-medium mb-1" for="pickupPostcode">Collection Postcode:</label>
          <input
            type="text"
            id="pickupPostcode"
            placeholder="Enter collection postcode"
            class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-red-500"
            autocomplete="off"
            required
          />
          <ul id="pickupSuggestions" class="absolute z-10 w-full bg-white border border-gray-300 rounded-md shadow-lg hidden"></ul>
        </div>
        <div class="relative">
          <label class="block text-sm font-medium mb-1" for="pickup">Collection address:</label>
          <input
            type="text"
            id="pickup"
            placeholder="Enter collection address"
            class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-red-500"
            autocomplete="off"
          />
        </div>
      </div>

      <!-- Delivery Address Section -->
      <div class="space-y-2">
        <div class="relative">
          <label class="block text-sm font-medium mb-1" for="destinationPostcode">Delivery Postcode:</label>
          <input
            type="text"
            id="destinationPostcode"
            placeholder="Enter delivery postcode"
            class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-red-500"
            autocomplete="off"
            required
          />
          <ul id="destinationSuggestions" class="absolute z-10 w-full bg-white border border-gray-300 rounded-md shadow-lg hidden"></ul>
        </div>
        <div class="relative">
          <label class="block text-sm font-medium mb-1" for="destination">Delivery address:</label>
          <input
            type="text"
            id="destination"
            placeholder="Enter delivery address"
            class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-red-500"
            autocomplete="off"
          />
        </div>
      </div>
    </div>

    <!-- Rest of the form remains exactly the same -->
    <div class="grid grid-cols-1 md:grid-cols-3 gap-4">
      <div>
        <label class="block text-sm font-medium mb-1" for="weight">Weight (kg):</label>
        <input
          type="number"
          id="weight"
          placeholder="Enter weight"
          step="0.1"
          min="0"
          class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-red-500"
          required
        />
      </div>
      <div>
        <label class="block text-sm font-medium mb-1" for="serviceLevel">Service Level:</label>
        <select 
          id="serviceLevel" 
          class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-red-500"
          required
        >
          <option value="standard">Standard</option>
          <option value="express">Express</option>
          <option value="nextDay">Next Day</option>
        </select>
      </div>
      <div>
        <label class="block text-sm font-medium mb-1" for="shippingType">Shipping Type:</label>
        <select 
          id="shippingType" 
          class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-red-500"
          required
        >
          <option value="parcel">Parcel</option>
          <option value="document">Document</option>
          <option value="pallet">Pallet</option>
        </select>
      </div>
    </div>
    <div id="distance-info" class="mt-4 p-3 bg-gray-100 rounded-md hidden">
      <p class="text-sm font-medium">Estimated driving distance: <span id="distance-value"></span></p>
    </div>
    <div id="price-info" class="mt-4 p-3 bg-gray-100 rounded-md hidden">
      <p>Estimated Price: &pound;<span id="price-value">N/A</span></p>
    </div>
    <div class="flex justify-end items-center pt-4">
      <button 
        type="submit" 
        id="quoteButton"
        disabled 
        class="px-4 py-2 bg-red-600 text-white rounded hover:bg-red-700 disabled:opacity-50 disabled:cursor-not-allowed"
      >
        Get Quote & Book
      </button>
    </div>
  </form>
</div>
  
<script src="https://js.stripe.com/v3/"></script>
<script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyDQAS10PACxUcHOp-46b10e6Etfrguxato&libraries=places"></script>
<script define:vars={{ userId }}>
    document.addEventListener('DOMContentLoaded', () => {
      const stripe = Stripe('pk_test_51OddvpG2vb5Xhm5fmHYLmRtMlZE1syE8oI4ohzhNcU7hdxRYY8hcV98pQNuVVTs4iaJjoxXhKwcXzCUvgdkrwqbi00ALKz3pW8');
      const form = document.getElementById('parcelForm');
      const pickupInput = document.getElementById('pickup');
      const destinationInput = document.getElementById('destination');
      const pickupPostcodeInput = document.getElementById('pickupPostcode');
      const destinationPostcodeInput = document.getElementById('destinationPostcode');
      const pickupSuggestions = document.getElementById('pickupSuggestions');
      const destinationSuggestions = document.getElementById('destinationSuggestions');
      const distanceInfo = document.getElementById('distance-info');
      const distanceValue = document.getElementById('distance-value');
      const priceInfo = document.getElementById('price-info');
      const priceElement = document.getElementById('price-value');
      const weightInput = document.getElementById('weight');
      const serviceLevelSelect = document.getElementById('serviceLevel');
      const shippingTypeSelect = document.getElementById('shippingType');
      let calculatedDistance = 0;
      const quoteButton = document.getElementById('quoteButton');

      // Modified Autocomplete initialization to restrict to UK addresses
      const autocompleteOptions = {
        types: ['address'],
        componentRestrictions: { country: 'gb' } // 'gb' is the country code for the United Kingdom
      };

      // Keep Google Maps Autocomplete for optional address fields
      const pickupAutocomplete = new google.maps.places.Autocomplete(pickupInput, autocompleteOptions);
      const destinationAutocomplete = new google.maps.places.Autocomplete(destinationInput, autocompleteOptions);

      // Postcode suggestions function remains the same
      async function fetchPostcodeSuggestions(query, suggestionsList) {
        if (query.length < 2) {
          suggestionsList.innerHTML = '';
          suggestionsList.classList.add('hidden');
          return;
        }

        try {
          const response = await fetch(`/api/postcode-suggestions?q=${encodeURIComponent(query)}`);
          if (!response.ok) throw new Error('Failed to fetch suggestions');
          
          const suggestions = await response.json();
          
          suggestionsList.innerHTML = '';
          suggestions.forEach(postcode => {
            const li = document.createElement('li');
            li.textContent = postcode;
            li.className = 'px-3 py-2 hover:bg-gray-100 cursor-pointer';
            li.onclick = () => {
              const input = suggestionsList.id === 'pickupSuggestions' ? pickupPostcodeInput : destinationPostcodeInput;
              input.value = postcode;
              suggestionsList.classList.add('hidden');
              calculateDistance(); // Trigger distance calculation when postcode is selected
            };
            suggestionsList.appendChild(li);
          });
          
          suggestionsList.classList.remove('hidden');
        } catch (error) {
          console.error('Error fetching postcode suggestions:', error);
        }
      }

      // Modified calculateDistance function to use postcodes
      async function calculateDistance() {
        const pickup = pickupPostcodeInput.value.trim();
        const destination = destinationPostcodeInput.value.trim();
        
        if (pickup && destination) {
          try {
            const response = await fetch(`/api/calculate-distance?origin=${encodeURIComponent(pickup)}&destination=${encodeURIComponent(destination)}`);
            if (!response.ok) throw new Error(`Failed to calculate distance: ${response.status} ${response.statusText}`);
            
            const data = await response.json();
            
            if (data.distance) {
              calculatedDistance = parseFloat(data.distance);
              distanceValue.textContent = `${data.distance} ${data.unit}`;
              updatePrice();
            } else {
              throw new Error('Invalid distance data');
            }
          } catch (error) {
            console.error('Error calculating distance:', error);
            distanceInfo.classList.add('hidden');
            priceInfo.classList.add('hidden');
            priceElement.textContent = 'N/A';
          }
        } else {
          distanceInfo.classList.add('hidden');
          priceInfo.classList.add('hidden');
          priceElement.textContent = 'N/A';
        }
      }

      function calculatePrice() {
        const distance = calculatedDistance;
        const weight = parseFloat(weightInput.value) || 0;
        const serviceLevel = serviceLevelSelect.value;
        const shippingType = shippingTypeSelect.value;

        // Updated base price for GBP (assuming £0.10 per mile + £2 base charge)
        let price = (distance * 0.1) + 2;
        price += weight * 0.2;

        if (serviceLevel === 'express') {
          price *= 1.5;
        } else if (serviceLevel === 'nextDay') {
          price *= 2;
        }

        if (shippingType === 'document') {
          price *= 0.8;
        } else if (shippingType === 'pallet') {
          price *= 2.5;
        }

        return price.toFixed(2);
      }

      function updatePrice() {
        if (pickupPostcodeInput.value && destinationPostcodeInput.value && weightInput.value && calculatedDistance > 0) {
          const price = calculatePrice();
          priceElement.textContent = price;
          priceInfo.classList.remove('hidden');
          
          // Enable/disable button based on price
          const numericPrice = parseFloat(price);
          quoteButton.disabled = isNaN(numericPrice) || numericPrice <= 0;
          
          // Update button styles based on state
          if (quoteButton.disabled) {
            quoteButton.classList.add('opacity-50', 'cursor-not-allowed');
          } else {
            quoteButton.classList.remove('opacity-50', 'cursor-not-allowed');
          }
        } else {
          priceElement.textContent = 'N/A';
          priceInfo.classList.add('hidden');
          quoteButton.disabled = true;
          quoteButton.classList.add('opacity-50', 'cursor-not-allowed');
        }
      }
      function pingServer() {
        fetch('/api/ping')
          .then(response => response.json())
          .catch(error => console.error('Ping failed:', error));
      }
      // Ping every 5 minutes
      setInterval(pingServer, 60 * 1000);
      // Initial ping when the page loads
      pingServer();

      let debounceTimer;
      function debounce(func, delay) {
        return function() {
          const context = this;
          const args = arguments;
          clearTimeout(debounceTimer);
          debounceTimer = setTimeout(() => func.apply(context, args), delay);
        }
      }

      // Modified event listeners to use postcode inputs for distance calculation
      pickupPostcodeInput.addEventListener('input', debounce(() => {
        fetchPostcodeSuggestions(pickupPostcodeInput.value, pickupSuggestions);
        calculateDistance();
      }, 300));

      destinationPostcodeInput.addEventListener('input', debounce(() => {
        fetchPostcodeSuggestions(destinationPostcodeInput.value, destinationSuggestions);
        calculateDistance();
      }, 300));

      // Remove distance calculation from address input listeners
      weightInput.addEventListener('input', updatePrice);
      serviceLevelSelect.addEventListener('change', updatePrice);
      shippingTypeSelect.addEventListener('change', updatePrice);

      // Hide suggestions when clicking outside
      document.addEventListener('click', (e) => {
        if (!pickupPostcodeInput.contains(e.target)) {
          pickupSuggestions.classList.add('hidden');
        }
        if (!destinationPostcodeInput.contains(e.target)) {
          destinationSuggestions.classList.add('hidden');
        }
      });

      // Form submission handler remains the same
      form.addEventListener('submit', async (e) => {
        e.preventDefault();

        const formData = {
          user: userId || 'anonymous',
          pickup: pickupInput.value || pickupPostcodeInput.value,
          destination: destinationInput.value || destinationPostcodeInput.value,
          price: parseFloat(priceElement.textContent) || 0,
          distance: calculatedDistance,
          completed: 0,
          serviceLevel: serviceLevelSelect.value,
          shippingType: shippingTypeSelect.value,
          weight: parseFloat(weightInput.value) || 0
        };

        console.log('Submitting form data:', formData);

        try {
          const response = await fetch('/api/create-checkout-session', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify(formData),
          });

          if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);

          const { sessionId } = await response.json();

          const result = await stripe.redirectToCheckout({
            sessionId: sessionId
          });

          if (result.error) {
            alert(result.error.message);
          }
        } catch (error) {
          console.error('Error:', error);
          alert('Error creating checkout session: ' + (error instanceof Error ? error.message : String(error)));
        }
      });
    });
</script>