---
import { SignedOut, SignInButton, SignedIn, UserButton } from "@clerk/astro/components";
import { Icon } from "astro-icon/components";
import Header from "~/components/header.astro";
import ThemeSwitcher from "~/components/theme-switcher.astro";

import "~/styles/index.css";

interface Order {
  user: string;
  order: number;
  stripe_price_id: string;
  pickup: string;
  destination: string;
  price: number;
  completed: number;
  datetime: string;
}

let orders: Order[] = [];
let error: string | null = null;
let responseStatus: number | null = null;
let responseText: string | null = null;
---

<!doctype html>
<html lang="en" class="h-full motion-safe:scroll-smooth" data-theme="dark">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width" />
    <title>Your Orders - Arknet Couriers</title>
    <link rel="icon" href="/favicon.ico" type="image/x-icon" />
    <link rel="icon" href="/favicon.svg" type="image/svg+xml" />
    
    <!-- Initialize theme -->
    <script is:inline>
      const themeSaved = localStorage.getItem("theme");

      if (themeSaved) {
        document.documentElement.dataset.theme = themeSaved;
      } else {
        const prefersDark = window.matchMedia(
          "(prefers-color-scheme: dark)",
        ).matches;
        document.documentElement.dataset.theme = prefersDark ? "dark" : "light";
      }

      window
        .matchMedia("(prefers-color-scheme: dark)")
        .addEventListener("change", (event) => {
          if (!localStorage.getItem("theme")) {
            document.documentElement.dataset.theme = event.matches
              ? "dark"
              : "light";
          }
        });
    </script>
    <style is:global>
        /* Base styles */
        body {
            transition: background-color 0.3s, color 0.3s;
            font-size: 16px;
        }
        
        /* Light theme */
        [data-theme="light"] {
            --header-shadow: 0 1px 2px rgba(0, 0, 0, 0.1); /* Subtle shadow for light mode */
            --header-bg: rgba(255, 255, 255, 0.65); /* Slightly transparent white */
            --logo-color: #000000;
            --bg-primary: #ffffff;
            --bg-secondary: #f3f4f6;
            --text-primary: #111827;
            --text-secondary: #4b5563;
            --border-color: #e5e7eb;
            --hover-bg: #f9fafb;
            --table-header-bg: #f3f4f6;
            --status-pending-bg: #fef3c7;
            --status-pending-text: #92400e;
            --status-completed-bg: #d1fae5;
            --status-completed-text: #065f46;
            --shadow-color: rgba(0, 0, 0, 0.1);
            --shadow: 0 4px 6px -1px var(--shadow-color),
                      0 2px 4px -1px var(--shadow-color);
                      
        }
        
        /* Dark theme */
        [data-theme="dark"] {
            --header-shadow: 0 1px 2px rgba(255, 255, 255, 0.047); /* Stronger shadow for dark mode */
            --header-bg: rgba(17, 24, 39, 0.8); /* Slightly transparent dark */
            --logo-color: #ffffff;
            --bg-primary: #111827;
            --bg-secondary: #1f2937;
            --text-primary: #f9fafb;
            --text-secondary: #9ca3af;
            --border-color: #374151;
            --hover-bg: #374151;
            --table-header-bg: #1f2937;
            --status-pending-bg: #84370b7a;
            --status-pending-text: #d2a125;
            --status-completed-bg: #05463498;
            --status-completed-text: #34d399;
            --shadow-color: rgba(0, 0, 0, 0.5);
            --glow-color: rgba(255, 255, 255, 0.05);
            --shadow: 0 4px 6px -1px var(--shadow-color),
                      0 2px 4px -1px var(--shadow-color),
                      0 0 0 1px var(--glow-color);
        }

        /* Header specific styles */
        #page-header {
            color: var(--logo-color);
            box-shadow: var(--header-shadow);
            background-color: var(--header-bg);
            backdrop-filter: blur(8px);
            transition: box-shadow 0.3s, background-color 0.3s, color 0.3s;
        }
        /* Style for the logo SVG */
        #page-header svg {
            fill: var(--logo-color);
            transition: fill 0.3s;
        }
        /* Applied styles */
        body {
            background-color: var(--bg-primary);
            color: var(--text-primary);
        }
        /* Main content spacing */
        main {
            padding-top: calc(4rem + 2rem) !important; /* Header height plus additional spacing */
        }
        .gradient-text {
            /* Adjusted gradient to balance purple and pink */
            background: linear-gradient(135deg, 
                #7a52f1 0%, 
                #ff0073 40%
            );
            -webkit-background-clip: text;
            background-clip: text;
            color: transparent;
            font-size: 2.5rem;
            margin-bottom: 1.5rem;
            margin-top: 1.5rem;
        }
        
        #orders-container .orders-table {
            width: 100%;
            border-radius: 0.5rem;
            overflow: hidden;
            box-shadow: var(--shadow);
            border: 0px solid var(--border-color);
            font-size: 1.25rem;
        }
        
        #orders-container .orders-table thead {
            background-color: var(--table-header-bg);
        }
        
        #orders-container .orders-table th {
            padding: 1.25rem;
            text-align: left;
            font-weight: 600;
            text-transform: uppercase;
            font-size: 1.1rem;
            color: var(--text-secondary);
        }
        
        #orders-container .orders-table td {
            padding: 1.25rem;
            border-bottom: 1px solid var(--border-color);
            font-size: 1.25rem;
        }
        
        #orders-container .orders-table tbody tr {
            transition: background-color 0.2s;
        }
        
        #orders-container .orders-table tbody tr:hover {
            background-color: var(--hover-bg);
        }
        /* Add styles for sortable headers */
        .sortable {
            cursor: pointer;
            user-select: none;
        }

        .sortable:hover {
            background-color: var(--hover-bg);
        }

        .sort-icon {
            display: inline-block;
            width: 0;
            height: 0;
            margin-left: 0.5rem;
            vertical-align: middle;
            border-left: 4px solid transparent;
            border-right: 4px solid transparent;
        }

        .sort-icon.asc {
            border-bottom: 4px solid var(--text-secondary);
        }

        .sort-icon.desc {
            border-top: 4px solid var(--text-secondary);
        }
        #orders-container .status-badge {
            padding: 0.5rem 1rem;
            border-radius: 9999px;
            font-weight: 500;
            font-size: 1.1rem;
            display: inline-block;
        }
        
        #orders-container .status-badge.pending {
            background-color: var(--status-pending-bg);
            color: var(--status-pending-text);
        }
        
        #orders-container .status-badge.completed {
            background-color: var(--status-completed-bg);
            color: var(--status-completed-text);
        }
        
        #orders-container .price {
            font-weight: 600;
            font-size: 1.35rem;
        }
        
        .no-orders {
            background-color: var(--bg-secondary);
            border-radius: 0.5rem;
            padding: 2rem;
            text-align: center;
            color: var(--text-secondary);
            font-size: 1.25rem;
        }
        .datetime {
            white-space: nowrap;
            font-size: 1rem;
        }
        /* Add padding below the table */
        .orders-container {
            padding-bottom: 5rem;
        }
        @media (max-width: 768px) {
            .orders-table {
                font-size: 1.1rem;
            }
            
            .orders-table th,
            .orders-table td {
                padding: 1rem;
            }
            .datetime {
                font-size: 0.8rem;
            }
        }
        /* Override ThemeSwitcher styles for orders page */
        #theme-switcher {
            margin-left: 0 !important;
            transform: scale(1) !important;
        }
    </style>
</head>
<body class="h-full overflow-x-hidden">
    <header
        id="page-header"
        class="fixed top-0 z-20 flex w-full items-center justify-between border-b border-transparent px-8 py-4 bg-default"
    >
        <a class="flex items-center gap-3 hover:!text-default" href="/">
            <h1 class="sr-only">Arknet</h1>
            <Icon name="arknetAlogo" class="size-10" />
            <Icon name="arknetnolog" class="hidden h-4 sm:block" />
        </a>
        
        <div class="flex items-center gap-6">
            <ThemeSwitcher />
            <li class="list-none">
                <SignedOut>
                  </SignedOut>
                
                <SignedIn>
                    <div class="user-button-wrapper">
                        <UserButton 
                        appearance={{
                            elements: {
                            avatarBox: "h-10 w-10",
                            card: "w-[400px] max-w-[85vw]", 
                            },
                            variables: {
                            fontSize: "1.2",
                            },
                        }}
                        showName={false}
                        userProfileProps={{
                            appearance: {
                            elements: {
                                rootBox: "w-full max-w-[800px] mx-auto",
                                card: "shadow-none",
                                navbar: "hidden",
                            },
                            variables: {
                                fontSize: "1.5",
                            },
                            },
                        }}
                        />
                    </div>
                </SignedIn>
            </li>
            <nav></nav>

        </div>
        
    </header>
    <main class="container mx-auto px-20">
        <h1 class="gradient-text font-bold">Your Orders</h1>
        
        <div id="orders-container">
            <!-- This div will be populated by JavaScript -->
        </div>
    </main>
    <script>
        import { Clerk } from '@clerk/clerk-js';
        const apiBaseUrl = import.meta.env.MODE === 'production' 
        ? 'https://worker-backend.hamzaaslam2121.workers.dev'
        : '';
        interface Order {
            user: string;
            order: number;
            stripe_price_id: string;
            pickup: string;
            destination: string;
            price: number;
            completed: number;
            datetime: string;
        }
    
        const clerk = new Clerk("pk_test_ZHJpdmluZy1tYWNhdy00NC5jbGVyay5hY2NvdW50cy5kZXYk");
        await clerk.load();
    
        async function fetchOrders(userId: string): Promise<Order[]> {
        try {
            const apiUrl = new URL(`${apiBaseUrl}/api/orders`, window.location.origin);
            console.log("Fetching from:", apiUrl.toString());
            
            const response = await fetch(apiUrl.toString());
            
            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }
            
            const allOrders = await response.json() as Order[];
            console.log("All fetched orders:", allOrders);

            const userOrders = allOrders.filter(order => order.user === userId);
            console.log("Filtered orders for user:", userOrders);

            return userOrders;
        } catch (e) {
            console.error("Failed to fetch or process orders:", e);
            return [];
        }
    }

    function renderOrders(orders: Order[] | null) {
            console.log("Rendering orders:", orders);
            const container = document.querySelector('#orders-container');
            if (!container) {
                console.error("Orders container not found");
                return;
            }

            if (!orders || orders.length === 0) {
                console.log("No orders to display");
                container.innerHTML = '<div class="no-orders"><p>You have no orders yet.</p></div>';
                return;
            }

            let tableHTML = `
                <div class="orders-container">
                    <table class="orders-table">
                        <thead>
                            <tr>
                                <th class="sortable" data-sort="address">Delivery Address <span class="sort-icon"></span></th>
                                <th class="sortable" data-sort="price">Price <span class="sort-icon"></span></th>
                                <th class="sortable" data-sort="status">Status <span class="sort-icon"></span></th>
                                <th class="sortable" data-sort="datetime">Date & Time <span class="sort-icon"></span></th>
                            </tr>
                        </thead>
                        <tbody>
            `;

            orders.forEach((order: Order) => {
                tableHTML += `
                    <tr>
                        <td data-address="${order.destination}">${order.destination}</td>
                        <td data-price="${order.price.toFixed(2)}">
                            <span class="price">£${order.price.toFixed(2)}</span>
                        </td>
                        <td data-status="${order.completed ? 'Completed' : 'Pending'}">
                            <span class="status-badge ${order.completed ? 'completed' : 'pending'}">
                                ${order.completed ? 'Completed' : 'Pending'}
                            </span>
                        </td>
                        <td class="datetime" data-datetime="${order.datetime || 'None'}">
                            ${order.datetime ? new Date(order.datetime).toLocaleString('en-GB', {
                                day: '2-digit',
                                month: '2-digit',
                                year: 'numeric',
                                hour: '2-digit',
                                minute: '2-digit',
                                hour12: false
                            }) : 'None'}
                        </td>
                    </tr>
                `;
            });

            tableHTML += `
                        </tbody>
                    </table>
                </div>
            `;

            container.innerHTML = tableHTML;
            addTableClickEvent();
            initialSortTable();
        }
    
        if (clerk.user) {
            const userId = clerk.user.id;
            console.log("Current user ID:", userId);
            const orders = await fetchOrders(userId);
            console.log("Orders fetched for rendering:", orders);
            renderOrders(orders);
        } else {
            console.log("No user is signed in.");
            renderOrders(null);
        }
        console.log("Astro script is running");
        // Ensure the theme switcher initializes and is visible
        document.addEventListener('astro:page-load', () => {
            const themeSwitcher = document.querySelector('#theme-switcher') as HTMLElement;
            if (themeSwitcher) {
                // Force the theme switcher to be visible
                themeSwitcher.style.marginLeft = '10';
                themeSwitcher.style.transform = 'scale(1)';
            
            // Initialize the theme
            const currentTheme = localStorage.getItem('theme') || (window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light');
            document.documentElement.dataset.theme = currentTheme;
            
            // Update the icon
            const updateIcon = () => {
              const theme = document.documentElement.dataset.theme;
              document.querySelector(`#icon-theme-${theme}`)?.classList.add('hidden');
              document.querySelector(`#icon-theme-${theme === 'light' ? 'dark' : 'light'}`)?.classList.remove('hidden');
            };
            updateIcon();
          }        
        });
        // Function to sort the table by datetime, most recent first
        function initialSortTable() {
            const table = document.querySelector('.orders-table') as HTMLTableElement;
            if (!table) return;

            const tbody = table.querySelector('tbody');
            if (!tbody) return;

            const rows = Array.from(tbody.querySelectorAll('tr')) as HTMLTableRowElement[];
            
            rows.sort((a, b) => sortByColumn(b, a, 'datetime', true)); // Note: We use 'b' before 'a' for descending order
            
            // Clear and re-append sorted rows
            tbody.innerHTML = '';
            rows.forEach(row => tbody.appendChild(row));

            // Update the sort icon
            const datetimeHeader = table.querySelector('th[data-sort="datetime"]');
            if (datetimeHeader) {
                const sortIcon = datetimeHeader.querySelector('.sort-icon');
                if (sortIcon) {
                    sortIcon.classList.add('desc');
                }
            }
        }
    // Helper function to parse date strings
    function parseDate(dateString: string | null): Date | null {
        if (!dateString || dateString === 'None') return null;

        // Parse the ISO date string
        const date = new Date(dateString);
        
        // Check if the date is valid
        return isNaN(date.getTime()) ? null : date;
    }
    // Helper function to parse price strings
    function parsePrice(priceString: string | null): number {
        if (!priceString) return 0;
        return parseFloat(priceString.replace(/[^0-9.-]+/g, ""));
    }

    // Sorting function for different types of data
    function sortByColumn(a: HTMLTableRowElement, b: HTMLTableRowElement, sortKey: string, isAscending: boolean): number {
        const aCell = a.querySelector(`td[data-${sortKey}]`);
        const bCell = b.querySelector(`td[data-${sortKey}]`);
        
        const aValue = aCell?.getAttribute(`data-${sortKey}`) || aCell?.textContent?.trim() || '';
        const bValue = bCell?.getAttribute(`data-${sortKey}`) || bCell?.textContent?.trim() || '';
        
        let comparison = 0;
        
        switch (sortKey) {
            case 'datetime':
                const aDate = parseDate(aValue);
                const bDate = parseDate(bValue);
                if (!aDate && !bDate) return 0;
                if (!aDate) return isAscending ? 1 : -1; // Treat null dates as oldest
                if (!bDate) return isAscending ? -1 : 1; // Treat null dates as oldest
                comparison = aDate.getTime() - bDate.getTime();
                break;
            case 'price':
                comparison = parsePrice(aValue) - parsePrice(bValue);
                break;
            case 'status':
            case 'address':
                comparison = aValue.localeCompare(bValue);
                break;
            default:
                comparison = aValue.localeCompare(bValue);
        }
        
        return isAscending ? comparison : -comparison;
    }


    // Function to add click event to the table
    function addTableClickEvent() {
        console.log("Adding click event to table");
        const table = document.querySelector('.orders-table') as HTMLTableElement;
        if (table) {
            console.log("Table found");
            table.addEventListener('click', (event: MouseEvent) => {
                const target = event.target as HTMLElement;
                const header = target.closest('th.sortable') as HTMLTableCellElement;
                if (!header) return;
                
                const sortKey = header.getAttribute('data-sort');
                if (!sortKey) return;

                const sortIcon = header.querySelector('.sort-icon');
                if (!sortIcon) return;

                const isAscending = sortIcon.classList.contains('desc'); // Toggle the order
                
                // Update sort icon
                sortIcon.classList.toggle('asc', isAscending);
                sortIcon.classList.toggle('desc', !isAscending);
                
                // Remove sorting classes from other headers
                table.querySelectorAll('th.sortable').forEach(th => {
                    if (th !== header) {
                        th.querySelector('.sort-icon')?.classList.remove('asc', 'desc');
                    }
                });
                
                // Sort the table
                const tbody = table.querySelector('tbody');
                if (!tbody) return;

                const rows = Array.from(tbody.querySelectorAll('tr')) as HTMLTableRowElement[];
                
                rows.sort((a, b) => sortByColumn(a, b, sortKey, isAscending));
                
                // Clear and re-append sorted rows
                tbody.innerHTML = '';
                rows.forEach(row => tbody.appendChild(row));
            });
            initialSortTable();
        } else {
            console.log("Table not found");
        }
    }
  addTableClickEvent();

  // Also try when the DOM is fully loaded
  document.addEventListener('DOMContentLoaded', () => {
    console.log("2. DOMContentLoaded event fired");
    addTableClickEvent();
  });

  // Keep the astro:page-load event as a fallback
  document.addEventListener('astro:page-load', () => {
    console.log("3. astro:page-load event fired");
    addTableClickEvent();
  });

  // Add a timeout as a last resort
  setTimeout(() => {
    console.log("6. Timeout fired after 2 seconds");
    addTableClickEvent();
    initialSortTable();
  }, 2000);
      </script>
</body>
</html>